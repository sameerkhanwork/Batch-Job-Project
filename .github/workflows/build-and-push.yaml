name: Build and Push to ECR
 
on:
  push:
    branches: [ "main" ]
 
permissions:
  id-token: write
  contents: read
 
jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest
    environment: production
 
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
 
      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
 
      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
 
      - name: Output image URI
        id: output-image
        run: |
          echo "IMAGE_URI=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ github.sha }}" >> $GITHUB_ENV

      # - name: Register new AWS Batch Job Definition
      #   run: | 
      #     JOB_DEF_NAME="my-app-job"
      #     echo "Using image URI: $IMAGE_URI"
          
      #     # Describe current job definition and get ONLY containerProperties
      #     CONTAINER_PROPS=$(aws batch describe-job-definitions \
      #       --job-definition-name $JOB_DEF_NAME \
      #       --status ACTIVE \
      #       --query 'jobDefinitions[0].containerProperties' \
      #       --output json)
          
      #     # Update image
      #     NEW_CONTAINER_PROPS=$(echo "$CONTAINER_PROPS" | jq --arg IMAGE "$IMAGE_URI" '
      #       .image = $IMAGE
      #       | .resourceRequirements |= map(
      #           if .type == "VCPU" then .value = (.value | tostring | split(".")[0]) else . end
      #         )
      #     ')
      #     # Register new job definition revision
      #     aws batch register-job-definition \
      #       --job-definition-name $JOB_DEF_NAME \
      #       --type container \
      #       --container-properties "$NEW_CONTAINER_PROPS"

      - name: Register new AWS Batch Job Definition
        run: |
          JOB_DEF_NAME="my-app-job"
          echo "Using image URI: $IMAGE_URI"
          
          # Describe current job definition
          aws batch describe-job-definitions \
            --job-definition-name $JOB_DEF_NAME \
            --status ACTIVE \
            --query 'jobDefinitions[0]' > jobdef.json
          
          # Extract only containerProperties and update image
          CONTAINER_PROPS=$(jq \
            --arg IMAGE "$IMAGE_URI" \
            '.containerProperties | .image = $IMAGE' jobdef.json)
          
          # Get platformCapabilities if it exists
          PLATFORM_CAPS=$(jq -r '.platformCapabilities[0]' jobdef.json)
          
          # Register new revision with proper parameters
          aws batch register-job-definition \
            --job-definition-name $JOB_DEF_NAME \
            --type container \
            --container-properties "$CONTAINER_PROPS" \
            --platform-capabilities "$PLATFORM_CAPS"

      - name: Submit AWS Batch Job
        run: |
          JOB_QUEUE="batch-fargate-queue"
          JOB_NAME="demo-job"
          JOB_DEF_NAME="my-app-job"
          aws batch submit-job \
            --job-name $JOB_NAME \
            --job-queue $JOB_QUEUE \
            --job-definition $JOB_DEF_NAME
 
 